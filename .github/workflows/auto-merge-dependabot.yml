name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if PR is from Dependabot
        id: check-author
        run: |
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "is_dependabot=true" >> $GITHUB_OUTPUT
          else
            echo "is_dependabot=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR details
        id: pr-details
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # Check if it's a patch/minor update (safe to auto-merge)
          if echo "$PR_TITLE" | grep -E "(patch|minor)" > /dev/null; then
            echo "is_safe_update=true" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -E "major" > /dev/null; then
            echo "is_safe_update=false" >> $GITHUB_OUTPUT
          else
            # Default to safe for non-major updates
            echo "is_safe_update=true" >> $GITHUB_OUTPUT
          fi
          
          # Extract package info
          PACKAGE_NAME=$(echo "$PR_TITLE" | sed -n 's/.*Bump \([^ ]*\) .*/\1/p')
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Wait for checks to complete
        if: steps.check-author.outputs.is_dependabot == 'true' && steps.pr-details.outputs.is_safe_update == 'true'
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'test'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success,neutral

      - name: Auto-approve Dependabot PR
        if: steps.check-author.outputs.is_dependabot == 'true' && steps.pr-details.outputs.is_safe_update == 'true'
        run: |
          gh pr review --approve "${{ github.event.pull_request.number }}" --body "ü§ñ Auto-approving safe dependency update for ${{ steps.pr-details.outputs.package_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge Dependabot PR
        if: steps.check-author.outputs.is_dependabot == 'true' && steps.pr-details.outputs.is_safe_update == 'true'
        run: |
          gh pr merge --squash --auto "${{ github.event.pull_request.number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add comment for major updates
        if: steps.check-author.outputs.is_dependabot == 'true' && steps.pr-details.outputs.is_safe_update == 'false'
        run: |
          gh pr comment "${{ github.event.pull_request.number }}" --body "‚ö†Ô∏è **Major Version Update Detected**
          
          This PR contains a major version update for ${{ steps.pr-details.outputs.package_name }} that requires manual review.
          
          **Please review the following before merging:**
          - [ ] Check for breaking changes in the changelog
          - [ ] Verify all tests pass
          - [ ] Test the application manually
          - [ ] Update any affected code if necessary
          
          üîí Auto-merge has been disabled for this PR due to potential breaking changes."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update project board
        if: steps.check-author.outputs.is_dependabot == 'true'
        run: |
          # Add PR to project board and set appropriate status
          gh project item-add 1 --owner shreyanshjain7174 --url "${{ github.event.pull_request.html_url }}" || true
          
          # Set priority based on update type
          if [ "${{ steps.pr-details.outputs.is_safe_update }}" = "true" ]; then
            echo "Setting P2 priority for safe update"
          else
            echo "Setting P1 priority for major update requiring review"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}