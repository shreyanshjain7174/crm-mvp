name: Security Audit

on:
  schedule:
    # Run security audit every Tuesday at 2:00 AM UTC
    - cron: '0 2 * * 2'
  workflow_dispatch:
  pull_request:
    paths:
      - '**/package.json'
      - '**/package-lock.json'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  security-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd apps/${{ matrix.workspace }}
          npm ci

      - name: Run npm audit
        id: audit
        run: |
          cd apps/${{ matrix.workspace }}
          npm audit --audit-level=moderate --json > audit-results.json || echo "Audit found issues"
          
          # Check if there are any vulnerabilities
          CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat audit-results.json | jq '.metadata.vulnerabilities.moderate // 0')
          
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          
          # Create human-readable summary
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "severity=high" >> $GITHUB_OUTPUT
          elif [ "$MODERATE" -gt 0 ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "severity=moderate" >> $GITHUB_OUTPUT
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "severity=none" >> $GITHUB_OUTPUT
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-${{ matrix.workspace }}
          path: apps/${{ matrix.workspace }}/audit-results.json

      - name: Create security issue
        if: steps.audit.outputs.status == 'failed'
        run: |
          ISSUE_TITLE="🚨 Security Alert: ${{ steps.audit.outputs.critical }} critical and ${{ steps.audit.outputs.high }} high vulnerabilities in ${{ matrix.workspace }}"
          
          ISSUE_BODY="## Security Vulnerabilities Detected
          
          **Workspace:** ${{ matrix.workspace }}
          **Severity:** Critical/High
          **Detection Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### Vulnerability Summary
          - 🔴 Critical: ${{ steps.audit.outputs.critical }}
          - 🟠 High: ${{ steps.audit.outputs.high }}
          - 🟡 Moderate: ${{ steps.audit.outputs.moderate }}
          
          ### Immediate Actions Required
          1. Review the audit results artifact
          2. Run \`npm audit fix\` in the ${{ matrix.workspace }} workspace
          3. For vulnerabilities that can't be auto-fixed, update dependencies manually
          4. Test the application after applying fixes
          
          ### Commands to Fix
          \`\`\`bash
          cd apps/${{ matrix.workspace }}
          npm audit fix
          npm audit fix --force  # Use with caution for breaking changes
          \`\`\`
          
          ### Additional Resources
          - [NPM Audit Documentation](https://docs.npmjs.com/cli/v8/commands/npm-audit)
          - [Node.js Security Best Practices](https://nodejs.org/en/docs/guides/security/)
          
          **This issue was automatically created by the security audit workflow.**"
          
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "security,vulnerability,high-priority,automated,${{ matrix.workspace }}" \
            --assignee "shreyanshjain7174"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update project board for security issues
        if: steps.audit.outputs.status == 'failed'
        run: |
          # Note: This would need the issue URL, but since we just created it,
          # we'd need to query for it or modify the above step to capture the URL
          echo "Security issue created for ${{ matrix.workspace }} - manual project board update needed"

      - name: Fail job if critical vulnerabilities found
        if: steps.audit.outputs.status == 'failed'
        run: |
          echo "❌ Critical or high vulnerabilities found in ${{ matrix.workspace }}"
          echo "Critical: ${{ steps.audit.outputs.critical }}"
          echo "High: ${{ steps.audit.outputs.high }}"
          exit 1

  audit-summary:
    runs-on: ubuntu-latest
    needs: security-audit
    if: always()
    steps:
      - name: Download audit results
        uses: actions/download-artifact@v3
        with:
          pattern: security-audit-*
          merge-multiple: true

      - name: Generate security report
        run: |
          echo "# Security Audit Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-report.md
          echo "" >> security-report.md
          
          for workspace in frontend backend; do
            if [ -f "audit-results.json" ]; then
              echo "## $workspace Workspace" >> security-report.md
              
              CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
              HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
              MODERATE=$(cat audit-results.json | jq '.metadata.vulnerabilities.moderate // 0')
              LOW=$(cat audit-results.json | jq '.metadata.vulnerabilities.low // 0')
              
              echo "- 🔴 Critical: $CRITICAL" >> security-report.md
              echo "- 🟠 High: $HIGH" >> security-report.md
              echo "- 🟡 Moderate: $MODERATE" >> security-report.md
              echo "- 🟢 Low: $LOW" >> security-report.md
              echo "" >> security-report.md
            fi
          done
          
          echo "## Recommendations" >> security-report.md
          echo "1. Address critical and high vulnerabilities immediately" >> security-report.md
          echo "2. Review moderate vulnerabilities for impact" >> security-report.md
          echo "3. Keep dependencies updated regularly" >> security-report.md
          echo "4. Enable Dependabot for automatic updates" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md